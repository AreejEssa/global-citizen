/**
 * Write your model definitions here
 */

namespace org.global.citizens.net

enum Status{
  o INITIALSTATE
  o GLOBALCITIZENREVIEW
  o GOVORGREVIEW
  o PROPOSALFUNDED
}

enum FundingType{
  o WEEKLY
  o MONTHLY
  o SEMIANNUALY
  o ANNUALY
}
enum FundingStatus{
  o COMPLETE
  o INCOMPLETE
}

enum MessageStatus{
  o NOTREVIEWED
  o REVIEWED
}

concept Funding {
  o FundingType fundingType
  o DateTime lastFundsReceived
  o DateTime nextFundingDueDate
  o Double approvedFunding
  o Double totalFundsReceived
  o Double fundsPerInstallment
//  o Double fundsReceivedInCurrentInstallment
  --> GovOrg govOrgId
}

concept Message {
  o DateTime reminderDate
  o Double amountDue
  o MessageStatus status
  --> ProjectProposal proposalId
}

asset ProjectProposal identified by proposalId {
  o String proposalId
  o String name
  o String decription
  o Double fundsRequired
  o Status status
  --> AidOrg aidOrg
  o Funding[] funds
}

abstract participant User {
  --> ProjectProposal[] projectProposal
}

participant GovOrg identified by govOrgId extends User {
  o String govOrgId
  o Message[] defaultMessage
  --> ProjectProposal[] fundedProposals
}

participant AidOrg identified by aidOrgId extends User {
  o String aidOrgId
}

participant GlobalCitizen identified by citizenId extends User {
  o String citizenId
}

transaction CreateProjectProposal {
  o String name
  o String decription
  o Double fundsRequired
  --> AidOrg aidOrg
}

transaction SendProposalToGlobalCitizen {
  --> GlobalCitizen citizenId
  --> ProjectProposal proposalId
}

transaction SendProposalToGovOrg {
  --> GovOrg[] govOrg
  --> ProjectProposal proposalId
}

transaction UpdateProposal {
  --> GovOrg govOrgId
  --> ProjectProposal proposalId
  o FundingType fundingType
  o Double approvedFunding
  o Double fundsPerInstallment
}

transaction TransferFunds {
  --> GovOrg govOrgId
  --> ProjectProposal proposalId
}
